// Copyright 2021 Crown Copyright (Single Trade Window)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package uk.gov.cabinetoffice.bpdg.stw.tradetariffapi.domain;

import static uk.gov.cabinetoffice.bpdg.stw.tradetariffapi.domain.MeasureUnit.Type.VOLUME;
import static uk.gov.cabinetoffice.bpdg.stw.tradetariffapi.domain.MeasureUnit.Type.WEIGHT;
import static uk.gov.cabinetoffice.bpdg.stw.tradetariffapi.domain.MeasureUnit.Type.UNIT;

public enum MeasureUnit {
  ASV("has a percentage by volume of",
      "%",
      "%",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  CCT("has a carrying capacity of",
      "metric tonne",
      "metric tonnes",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  CEN("consists of",
      "00 items",
      "00 items",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  CTM("boasts",
      "carat (one metric carat = 2 x 10$-$4kg)",
      "carats (one metric carat = 2 x 10$-$4kg)",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  DAP("weighs",
      "decatonne (10 tonnes), corrected according to polarisation",
      "decatonnes (10 tonnes), corrected according to polarisation",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  DHS("weighs",
      "kilogram of dihydrostreptomycin",
      "kilograms of dihydrostreptomycin",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  DTN("weighs",
      "hectokilogram (100 kilograms)",
      "hectokilograms (100 kilograms)",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  EUR("is valued at",
      "Euro",
      "Euros",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  GFI("weighs",
      "gram of fissile isotopes",
      "grams of fissile isotopes",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  GP1("is produced in",
      "unit",
      "units",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  GRM("weighs",
      "gram",
      "grams",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  GRT("weighs",
      "gross tonnage",
      "gross tonnage",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  HLT("is",
      "hectolitre (100 litres)",
      "hectolitres (100 litres)",
      "tbc",
      "tbc",
      "tbc",
      VOLUME),
  HMT("measures",
      "hectometre (100 metres)",
      "hectometres (100 metres)",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  KAC("weighs",
      "kilogram net of acesulfame potassium",
      "kilograms net of acesulfame potassium",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  KCC("weighs",
      "kilogram of choline chloride",
      "kilograms of choline chloride",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  KCL("weighs",
      "tonne of potassium chloride",
      "tonnes of potassium chloride",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  KGM("weighs",
      "kilogram",
      "kilograms",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  NO_UNIT_CODE("the unit is",
    "" ,
    "",
    "tbc",
    "",
    "",
    UNIT),

  KLT("is",
      "kilolitre (1000 litres)",
      "kilolitres (1000 litres)",
      "tbc",
      "tbc",
      "tbc",
      VOLUME),
  KMA("weighs",
      "kilogram of methylamines",
      "kilograms of methylamines",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  KMT("measures",
      "kilometre",
      "kilometres",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  KNI("weighs",
      "kilogram of nitrogen",
      "kilograms of nitrogen",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  KNS("weighs",
      "kilogram of hydrogen peroxide",
      "kilograms of hydrogen peroxide",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  KPH("weighs",
      "kilogram of potassium hydroxide",
      "kilograms of potassium hydroxide",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  KPO("weighs",
      "kilogram of potassium oxide",
      "kilograms of potassium oxide",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  KPP("weighs",
      "kilogram of diphosphorus pentaoxide",
      "kilograms of diphosphorus pentaoxide",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  KSD("weighs",
      "kilogram of substance 90% dry",
      "kilograms of substance 90% dry",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  KSH("weighs",
      "kilogram of sodium hydroxide",
      "kilograms of sodium hydroxide",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  KUR("weighs",
      "kilogram of uranium",
      "kilograms of uranium",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  LPA("is",
      "litre of pure alcohol",
      "litres of pure alcohol",
      "tbc",
      "tbc",
      "tbc",
      VOLUME),
  LTR("is",
      "litre",
      "litres",
      "tbc",
      "tbc",
      "tbc",
      VOLUME),
  MIL("consists of",
      "000 items",
      "000 items",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  MPR("consists of",
      "000 pairs",
      "000 pairs",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  MTK("measures",
      "square metre",
      "square metres",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  MTQ("measures",
      "cubic metre",
      "cubic metres",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  MTR("measures",
      "metre",
      "metres",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  MWH("has a kilowatt hours value of",
      "000 kilowatt hours",
      "000 kilowatt hours",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  NAR("consists of",
      "item",
      "items",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  NCL("consists of",
      "cell",
      "cells",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  NPR("consists of",
      "pair",
      "pairs",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  TJO("has a gross calorific value of",
      "terajoule",
      "terajoules",
      "tbc",
      "tbc",
      "tbc",
      UNIT),
  TNE("weighs",
      "tonne",
      "tonnes",
      "tbc",
      "tbc",
      "tbc",
      WEIGHT),
  WAT(
      "has a wattage of",
      "watt",
      "watts",
      "tbc",
      "tbc",
      "tbc",
      UNIT);

  public enum Type {
    WEIGHT, VOLUME, UNIT
  }

  private final String englishVerb;
  private final String welshVerb;
  private final String englishUnitSingular;
  private final String englishUnitPlural;
  private final String welshUnitSingular;
  private final String welshUnitPlural;
  private final Type type;

  MeasureUnit(
      String englishVerb,
      String englishUnitSingular,
      String englishUnitPlural,
      String welshVerb,
      String welshUnitSingular,
      String welshUnitPlural,
      Type type) {
    this.englishVerb = englishVerb;
    this.englishUnitSingular = englishUnitSingular;
    this.englishUnitPlural = englishUnitPlural;
    this.welshVerb = welshVerb;
    this.welshUnitSingular = welshUnitSingular;
    this.welshUnitPlural = welshUnitPlural;
    this.type = type;
  }




  public boolean isWeightBased(){
    return type == WEIGHT;
  }

  public boolean isVolumeBased(){
    return type == VOLUME;
  }

  public boolean isUnitBased(){
    return type == UNIT;
  }

  public String getVerb(Locale locale) {
    return locale == Locale.EN ? englishVerb : welshVerb;
  }

  public String getUnit(Locale locale, float quantity) {
    return locale == Locale.EN
        ? quantity > 1 ? englishUnitPlural : englishUnitSingular
        : quantity > 1 ? welshUnitPlural : welshUnitSingular;
  }
}
